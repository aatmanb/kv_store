syntax = "proto3";

message empty {
}

message clientMetaData {
    string addr = 1;
}

message putAck {
    string key = 1;
    string value = 2;
    clientMetaData meta = 3;
}

message getReq {
	string key = 1;
    clientMetaData meta = 2;
}

message putReq {
	string key = 1;
	string value = 2;
    clientMetaData meta = 3;
}

message reqStatus {
    int32 status = 1;
}

message fwdGetReq {
    getReq req = 1;
}

message fwdPutReq {
    putReq req = 1;
}

message notifyFailureReq {
    string failedNode = 1;
}

message notifyRestartReq {
    string node = 1;
}

message notifyPredFailureReq {
    string newPred = 1;
    bool wasHead = 2;
}

message notifySuccessorFailureReq {
    string newSuccessor = 1;
    bool wasTail = 2;
}

message addTailNodeReq {
    string newTail = 1;
}

message dbEntry {
    string key = 1;
    string value = 2;
}

message dbPath {
    string path = 1;
}

message notifyRestartResponse {
    string db_path = 1;
    string chain_addr = 2;
}

message failCommand {
    bool clean = 1;
}

service kv_store {
	// Client facing RPCs
    rpc get (getReq) returns (reqStatus) {};
	rpc put (putReq) returns (reqStatus) {};
    rpc ping (empty) returns (empty) {};
    rpc fail (failCommand) returns (empty) {};
    
    // Used by the service internally
    rpc fwdGet (fwdGetReq) returns (empty) {};
    rpc fwdPut (fwdPutReq) returns (empty) {};
    rpc commit (fwdPutReq) returns (empty) {};
    rpc ack (putAck) returns (empty) {};

    // Used by the master node
    rpc heartBeat(empty) returns (empty) {};

    // Used for reconfiguration
    rpc notifyPredFailure (notifyPredFailureReq) returns (empty) {};

    rpc notifySuccessorFailure (notifySuccessorFailureReq) returns (empty) {};

    rpc addTailNode (addTailNodeReq) returns (empty) {};

    // rpc populateDB (empty) returns (dbPath) {};
}

service master {
    // For clean failures
    rpc notifyFailure (notifyFailureReq) returns (empty) {};

    rpc notifyRestart (notifyRestartReq) returns (notifyRestartResponse) {};
}


message getResp {
    int32 status = 1;
    string value = 2;
}

message putResp {
    int32 status = 1;
    string old_value = 2;
}

message respStatus {
    int32 status = 1;
}

service KVResponse {
    rpc sendGetResp (getResp) returns (respStatus) {};
    rpc sendPutResp (putResp) returns (respStatus) {};
    rpc ping (empty) returns (empty) {};
}
